import asyncio

import aiogram.exceptions

from bot import functions, keyboards
from config import settings
from utils.logger import setup_logger
from database.base import get_db
from database.repository.user import UserRepository
from database.repository.tracking import TrackingRepository

logger = setup_logger(__name__)


async def check_new_cars_task():
    logger.info('–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ –ø–æ—è–≤–ª–µ–Ω–∏–π –Ω–æ–≤—ã—Ö –º–∞—à–∏–Ω')

    async with get_db() as session:
        tracking_repo = TrackingRepository(session)
        tracking_list = await tracking_repo.tracking_list_all()
        user_repo = UserRepository(session)

        if tracking_list:
            for tracking in tracking_list:
                if tracking.is_active:
                    car_ids = await functions.parse_cars(session, tracking.id)
                    for car_id in car_ids:
                        if car_id not in tracking.car_ids:
                            try:
                                car_info = await functions.get_car_info_url(car_id)

                                car_age = functions.cal_car_age(
                                    int(str(car_info['cars']['base']['category']['yearMonth'])[:4]),
                                    str(car_info['cars']['base']['category']['yearMonth'])[4:]
                                )

                                msg = await functions.show_car_info(
                                    tracking.user_id,
                                    car_info,
                                    car_age,
                                    is_support=True
                                )

                                text = f'üîî <b>–ù–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º!</b>'
                                kb = keyboards.new_car(car_id)

                                if isinstance(msg, list):
                                    await msg[0].reply(text, reply_markup=kb)
                                else:
                                    await msg.reply(text, reply_markup=kb)

                                user_info = await user_repo.get_user(tracking.user_id)

                                if user_info:
                                    username_text = f' @{user_info.username}' if user_info.username else ''
                                else:
                                    username_text = ''

                                while True:
                                    try:
                                        if user_info:
                                            text = f'<b>–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info.first_name}{username_text} (ID: {user_info.id})'
                                        else:
                                            text = f'<b>–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {tracking.user_id})'

                                        text += f' –ø–æ—è–≤–∏–ª–æ—Å—å –∞–≤—Ç–æ –ø–æ –µ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º</b>\n\n<a href="https://fem.encar.com/cars/detail/{car_id}">–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å</a>'

                                        await functions.show_track(
                                            settings.LOG_CHAT_ID,
                                            session,
                                            tracking.id,
                                            is_support=True,
                                            title=text
                                        )

                                        break
                                    except aiogram.exceptions.TelegramRetryAfter as time:
                                        await asyncio.sleep(time.retry_after + 1)

                                await asyncio.sleep(10)
                            except Exception as e:
                                logger.info(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ({tracking.user_id}) –æ –Ω–æ–≤–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ ({car_id}) –ø–æ –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: {str(e)}')
                                await asyncio.sleep(1)

                    await tracking_repo.update_car_ids(tracking.id, list(set(tracking.car_ids + car_ids)))
                else:
                    await functions.activate_tracking(session, tracking.id)
        else:
            logger.info('–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—É—Å—Ç')

    logger.info('–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ –ø–æ—è–≤–ª–µ–Ω–∏–π –Ω–æ–≤—ã—Ö –º–∞—à–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω')
